#!/usr/bin/env node

const app = require('../app');
const config = require('../src/config');
const debug = require('debug')('medre-be:server');
const http = require('http');
const logger = require("../src/config/logger");
const sequelize = require('../src/config/database');
const {SocketServer} = require("../src/socket");
const {Server} = require("socket.io");
const {redisClient} = require("../src/config/redis");

app.set('port', config.port);

const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof config.port === 'string'
      ? 'Pipe ' + config.port
      : 'Port ' + config.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

(async () => {
  try {
    await sequelize.authenticate();
    logger.info('Connection Postgres database successfully.');

    server.listen(config.port, () => {
      logger.info(`Server is running on the port: http://localhost:${config.port}`);
    })

    server.on('error', onError);
    server.on('listening', onListening);

    // socket have specific namespace
    const io = new Server(server, {
      cors: { origin: '*' }
    }).of('/socket');

    SocketServer(io);
    global._io = io;

    logger.info(`Socket Server is running: http://localhost:${config.port}/socket`);

    await redisClient.connect();
  } catch (error) {
    logger.error('Unable to connect to the database:', error);
  }
})();
