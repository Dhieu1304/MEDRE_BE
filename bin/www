#!/usr/bin/env node

const app = require('../app');
const config = require('../src/config');
const debug = require('debug')('medre-be:server');
const http = require('http');
const logger = require("../src/config/logger");
const sequelize = require('../src/config/database');

app.set('port', config.port);

const server = http.createServer(app);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof config.port === 'string'
      ? 'Pipe ' + config.port
      : 'Port ' + config.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

(async () => {
  try {
    await sequelize.authenticate();
    const createQuery = `CREATE DATABASE IF NOT EXISTS Medre ;`
    sequelize.query(createQuery)
        .then(() => console.log("DB created"))
        .catch(err => console.log("error creating DB", err))
    logger.info('Connection has been established successfully.');

    server.listen(config.port, () => {
      logger.info(`Server is running on the port: http://localhost:${config.port}`);
    })

    server.on('error', onError);
    server.on('listening', onListening);

  } catch (error) {
    logger.error('Unable to connect to the database:', error);
  }
})();
